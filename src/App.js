// src/App.js

import React, { useEffect, useState, useCallback } from 'react';
import { Amplify } from 'aws-amplify'; // Make sure this is imported
import { generateClient } from 'aws-amplify/api'; // Make sure this is imported
import awsExports from './aws-exports'; // This file contains your Amplify backend config

// GraphQL Operations generated by Amplify CLI (ensure these files exist in src/graphql/)
import { createTodo, updateTodo, deleteTodo } from './graphql/mutations';
import { listTodos } from './graphql/queries';
import { onCreateTodo, onUpdateTodo, onDeleteTodo } from './graphql/subscriptions';
import './App.css'; // Your CSS file for styling

// Configure Amplify Client (this tells Amplify how to connect to your backend)
Amplify.configure(awsExports);

function App() {
  const client = generateClient(); // Initialize the Amplify GraphQL client

  const [todos, setTodos] = useState([]);
  const [newTodoName, setNewTodoName] = useState('');
  const [newTodoDescription, setNewTodoDescription] = useState('');

  // Function to fetch todos from AppSync
  const fetchTodos = useCallback(async () => {
    try {
      const todoData = await client.graphql({
        query: listTodos // Use the GraphQL query
      });
      const todos = todoData.data.listTodos.items;
      setTodos(todos);
    } catch (error) {
      console.error('Error fetching todos', error);
    }
  }, [client]); // fetchTodos depends on 'client'

  // Function to add a new todo via AppSync
  async function handleAddTodo() {
    if (!newTodoName.trim()) return;
    const todo = { name: newTodoName, description: newTodoDescription };
    try {
      await client.graphql({
        query: createTodo, // Use the GraphQL mutation
        variables: { input: todo }
      });
      setNewTodoName('');
      setNewTodoDescription('');
    } catch (error) {
      console.error('Error creating todo:', error);
    }
  }

  // Function to update todo status via AppSync
  async function handleUpdateTodoStatus(todoId, currentStatus) {
    const newStatus = currentStatus === 'PENDING' ? 'COMPLETED' : 'PENDING'; // Toggle status
    try {
      await client.graphql({
        query: updateTodo, // Use the GraphQL mutation
        variables: { input: { id: todoId, status: newStatus } }
      });
    } catch (error) {
      console.error('Error updating todo:', error);
    }
  }

  // Function to delete a todo via AppSync
  async function handleDeleteTodo(todoId) {
    try {
      await client.graphql({
        query: deleteTodo, // Use the GraphQL mutation
        variables: { input: { id: todoId } }
      });
    } catch (error) {
      console.error('Error deleting todo:', error);
    }
  }

  // useEffect for initial fetch and setting up subscriptions
  useEffect(() => {
    fetchTodos(); // Fetch todos when component mounts

    // Setup GraphQL Subscriptions (for real-time updates)
    // Ensure client.subscriptions.subscribe is a function before calling
    if (typeof client.subscriptions?.subscribe === 'function') {
      const createSubscription = client.subscriptions.subscribe({ query: onCreateTodo }).subscribe({
        next: (todoData) => {
          console.log('New Todo created via subscription:', todoData.data.onCreateTodo);
          setTodos(prevTodos => [...prevTodos, todoData.data.onCreateTodo]);
        },
        error: error => console.warn('Error creating todo via subscription:', error)
      });

      const updateSubscription = client.subscriptions.subscribe({ query: onUpdateTodo }).subscribe({
        next: (todoData) => {
          console.log('Todo updated via subscription:', todoData.data.onUpdateTodo);
          setTodos(prevTodos =>
            prevTodos.map(todo =>
              todo.id === todoData.data.onUpdateTodo.id ? todoData.data.onUpdateTodo : todo
            )
          );
        },
        error: error => console.warn('Error updating todo via subscription:', error)
      });

      const deleteSubscription = client.subscriptions.subscribe({ query: onDeleteTodo }).subscribe({
        next: (todoData) => {
          console.log('Todo deleted via subscription:', todoData.data.onDeleteTodo);
          setTodos(prevTodos =>
            prevTodos.filter(todo => todo.id !== todoData.data.onDeleteTodo.id)
          );
        },
        error: error => console.warn('Error deleting todo via subscription:', error)
      });

      // Cleanup function for subscriptions when component unmounts
      return () => {
        createSubscription.unsubscribe();
        updateSubscription.unsubscribe();
        deleteSubscription.unsubscribe();
      };
    } else {
      console.error("client.subscriptions.subscribe is not a function. Subscriptions will not work.");
    }
  }, [client, fetchTodos]); // Dependencies for useEffect

  return (
    <div className="App">
      <header className="App-header">
        <h1>My To-Do List (Amplify/AppSync Version)</h1>
        <div className="add-todo-form">
          <input
            type="text"
            placeholder="New To-Do Name"
            value={newTodoName}
            onChange={(e) => setNewTodoName(e.target.value)}
          />
          <input
            type="text"
            placeholder="Description (optional)"
            value={newTodoDescription}
            onChange={(e) => setNewTodoDescription(e.target.value)}
          />
          <button onClick={handleAddTodo}>Add To-Do</button>
        </div>
        <ul className="todo-list">
          {todos.map((todo) => (
            <li key={todo.id} className={`todo-item ${todo.status?.toLowerCase() || 'pending'}`}>
              {/* Clicking on todo text toggles status */}
              <span onClick={() => handleUpdateTodoStatus(todo.id, todo.status)}>
                {todo.name} {todo.description && `(${todo.description})`}
              </span>
              <button onClick={() => handleDeleteTodo(todo.id)}>Delete</button>
            </li>
          ))}
        </ul>
      </header>
    </div>
  );
}

export default App;